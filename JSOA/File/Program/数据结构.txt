#include <stdio.h> 
main() 
{ 
int n, m, i, s=0; 
printf("N="); scanf("%d", &n); 
printf("M="); scanf("%d", &m); 
for(i=2; i<=n; i++) s=(s+m)%i; 
printf("The winner is %d\n", s+1); 
} 

using namespace std;
class List                                                          //定义单链表的结构
{
public:
    int num;
    class List *next;
    void create();
    void print();
    void find();
    void inser();
    void dele();
    void choose();
};
typedef class List Node;                                             //将class List再命名为Node
typedef Node *Link;                                                  //声明单链表的指针
Link top，p,s;
void List::choose()
{
    List List1;
    int r;
    bool toD = true;
    while(toD)
    {
        cout<<"1, input data create a new table"<<endl;
        cout<<"2, print the table"<<endl;
        cout<<"3, find digital in the table"<<endl;
        cout<<"4, insert digital in the table"<<endl;
        cout<<"5, delete digital in the table"<<endl;
        cout<<"press the other key, select exit"<<endl;
        cin>>r;
        switch (r)
        {
            case 1:
                List1.create();                                     //创建链表
                break;
            case 2:
                List1.print();                                      //显示表中的数据
                break;
            case 3:
                List1.find();                                       //查找链表中的数据
                break;
            case 4:
                List1.inser();                                      //在链表中插入数据
                break;
            case 5:
                List1.dele();                                       //在链表中删除数据
                break;
            default:
                toD = false;
                break;
        }
    }
}
void List::create()                                                 //创建链表
{
    int c;
    bool toC = true;
    top = new Node;
    (*top).next = NULL;
    p = top;
    while(toC)
    {
        cout<<"choose 1,input data";
        cout<<endl;
        cout<<"press the other key,the table is fulfil";
        cout<<endl;
        cin>>c;
        switch (c)
        {
            case 1:
                cout<<"input the data you want in the table";
                cout<<endl;
                s = new Node;
                cin>>(*s).num;
                (*p).next = s;
                (*s).next = NULL;
                p = (*p).next;
                break;
            default:
                toC = false;
                break;
        }
    }
    print();
}
void List::print()                                                  //显示
{
    p = (*top).next;
    while(p)
    {
        cout<<(*p).next<<"\t"<<"\t"<<(*p).num<<endl;
        p = (*p).next;
    }
}
void List::find()                                                   // 查找
{
    int j = 1;
    int i;
    p = (*top).next;
    cout<<"please enter you want find position with "<<endl;
    cin>>i;
    while(p && j<i)
    {
        p = (*p).next;
        j++;
    }
    if(!p)
    {
        cout<<"seek error!";
        cout<<endl;
    }
    else
    {
        cout<<p<<"\t"<<"\t"<<(*p).num;
        cout<<endl;
    }
}
void List::inser()                                                  //插入
{
    int j = 0;
    int i;
    p = (*top).next;
    cout<<"please input you want insert number"<<endl;
    cin>>num;
    cout<<"please input you want insert position"<<endl;
    cin>>i;
    while(p && j<i-1)
    {
        p = (*p).next;
        j++;
    }
    if(!p)
    {
        cout<<"insert error!";
        cout<<endl;
    }
    else
    {
        Link s;
        s = new Node;
        (*s).num = num;
        (*s).next = (*p).next;
        (*p).next = s;
    }
    print();
}
void List::dele()                                                   //删除
{
    int j = 0;
    int i;
    p = top;
    cout<<"please input you want delete position"<<endl;
    cin>>i;
    while(p && j<i-1)
    {
        p = (*p).next;
        j++;
    }
    if(!p)
    {
        cout<<"delete error!";
        cout<<endl;
    }
    else
    {
        s = new Node;
        s = (*p).next;
        (*p).next = (*s).next;
    }
    print();
}
int main()
{
    List List1;                                                     //实例化一个类
    List1.choose();
    return 0;
}


// 单向链表.cpp : 定义控制台应用程序的入口点。
//
#include "stdafx.h"
#include<iostream>
#include<stdio.h>
#include<malloc.h>
using namespace std;

typedef struct node               //声明struct node类型
{
	int data;
	struct node *next;
}LNode,*LinkList;

struct node *create()             //定义create（）函数实现链表创建
{
	int i,n;
	struct node *head,*p1,*p2;    //定义指针变量
	int a;
	head=NULL;                    //头指针初始化为空
	cout<<"请输入链表节点个数：n=";
	cin>>n;
	cout<<"请输入一串整数数据：";
	for(i=n;i>0;--i)
	{
		p1=(struct node*)malloc(sizeof(struct node));  //分配空间
		cin>>a;
		p1->data = a;                                  //给数据域赋值
		if(head==NULL)                                 //头结点为空时，输入的第一个数据为头结点
		{
			head = p1;
			p2 = p1;
		}
		else                  //头结点不为空时，前一个节点的指针域指向新输入的数值，指针后移
		{
			p2->next = p1;
			p2 = p1;
		}
	}
	p2->next = NULL;                       //尾节点赋为空
	cout<<"成功生成链表！"<<endl;
	return head;
}
struct node *printlist(struct node *head)  //定义delnode函数，实现打印输出链表功能
{
	struct node *p;
	p=head;
	if(!p)                                 //当链表为空，提示创建新链表
		cout<<"链表为空！请先创建链表。"<<endl;
	while(p)                               //链表不为空，遍历输出
	{
		cout<<p->data<<"   ";
		p=p->next;
	}
	return head;
}
struct node *delnode(struct node *head)    //定义delnode函数，实现删除指定节点的功能
{
	int j=0,i;
	struct node *p,*r;
	p=head;
	cout<<"请输入删除的节点：i=";
	cin>>i;
	cout<<"成功删除！"<<endl;
	while(p&&j<i-1)                        //查找到指定节点停止
	{
		p=p->next ;
		++j;
	}
    if(!p->next ||j>i-1)
		exit(1);
	r=p->next ;                            //将指向被删除的节点的指针指向被删除节点的下一个节点
	p->next =r->next;
	free(r);                               //释放内存
	return head;
}
int menu()                                 //菜单提供操作选择
{
	int m;
	cout<<"请选择需要进行的操作：1.创建新链表 2.删除节点 3.打印链表 4.退出"<<endl;
	cin>>m;
	return m;
}
int _tmain(int argc, _TCHAR* argv[])
{
	
	struct node *q;
    q=NULL;
	while(1){
		switch(menu())
		{
		case 1:q=create();break;                //调用创建链表函数
	    case 2:q=delnode(q);break;              //调用节点删除函数   此函数有疑问，不能删除第一个
	    case 3:q=printlist(q);break;            //调用输出打印函数
	    case 4:exit(0);                         //退出
		}	
	}
	return 0;
}


