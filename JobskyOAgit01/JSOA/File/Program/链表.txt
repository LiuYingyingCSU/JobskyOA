// 实现链表.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include<stdio.h>
#include<malloc.h>
#include<iostream>
using namespace std;

typedef char ElemType;
typedef struct LNode
{
	ElemType data;
	struct LNode *next;
}LinkList;

void InitList(LinkList *&L)
{
	L=(LinkList *)malloc (sizeof(LinkList));
	L->next=NULL;
}
 
void DestroyList(LinkList *&L)               //删除链表
{
	LinkList *p=L,*q=p->next;
	while(q!=NULL)                           //q为p的下一个节点，q为非空时
	{ 
		free(p);                             //释放p
		p=q;                                 //将节点q赋给p,q指向下一个节点
		q=p->next;
	}
	free(p);                                 //释放头节点
}

int ListEmpty(LinkList *L)                   //判断链表是否为空
{
	return(L->next==NULL);
}

int ListLength(LinkList *L)                 //判断链表的长度
{
	LinkList *p=L;
	int i=0;
	while(p->next!=NULL)                   
	{
		i++;
		p=p->next;
	}
	return(i);
}

void DispList(LinkList *L)                 //打印链表
{
	LinkList *p=L->next;
	while(p!=NULL)
	{
		cout<<p->data<<"\t";            
		p=p->next;
	}
	cout<<endl;
}

int GetElem(LinkList *L,int i,ElemType &e)//查找第i个节点
{
	int j=0;
	LinkList *p=L;
	while(j<i && p!=NULL)                
	{
		j++;
		p=p->next;
	}
	if(p==NULL)                          //第i个节点不存在，返回0
		return 0;
	else                                 //否则将值赋给e,返回e
	{
		e=p->data;
		return 1;
	}
}

int LocateElem(LinkList *L,ElemType e) //查找元素e在第几个位置
{
	LinkList *p=L->next;               //p指向首元节点
	int n=1;
	while(p!=NULL && p->data!=e)       //p为非空且元素不为e
	{
		p=p->next;                     //指针下移
		n++;                           //n记录元素位置
	}
	if (p==NULL)                       //不存在元素e
		return(0);
	else
		return(n);                     //查找到元素e,将位置返回
}

int ListInsert(LinkList *&L,int i,ElemType e)
{
	int j=0;
	LinkList *p=L,*s;
	while(j<i-1 && p!=NULL)
	{
		j++;
		p=p->next;
	}
	if (p==NULL)                       //未查找到第i-1个节点
		return 0;
	else                               //找到第i-1个节点
	{
		s=(LinkList *)malloc(sizeof(LinkList)); //创建新节点s
		s->data=e;                    
		s->next=p->next;               //节点s后插在第i-1个节点后面
		p->next=s;
		return 1;                      //插入成功
	}
}

int ListDelete(LinkList *&L,int i,ElemType &e)
{
	int j=0;
	LinkList *p=L,*q;
	while(j<i-1 && p!=NULL)
	{
		j++;
		p=p->next;
	}
	if(p==NULL)
		return 0;
	else
	{
		q=p->next;
		p->next =q->next;
		free(q);
		return 1;
	}
}

void menu()
{
	cout<<"--------------菜单--------------"<<endl;
	cout<<"--  1. 创建一个新的链表       --"<<endl;
	cout<<"--  2. 查询元素的位置         --"<<endl;
	cout<<"--  3. 查询第i号元素的值      --"<<endl;
	cout<<"--  4. 插入元素               --"<<endl;
	cout<<"--  5. 删除元素               --"<<endl;
	cout<<"--  6. 打印链表               --"<<endl;
	cout<<"--  7. 删除链表               --"<<endl;
	cout<<"--  8. 判断链表是否为空       --"<<endl;
	cout<<"--  9. 查询链表总长度         --"<<endl;
	cout<<"--  0. 退出                   --"<<endl;
	cout<<"--------------------------------"<<endl;
}

int _tmain(int argc, _TCHAR* argv[])
{
	LinkList *h;
	ElemType e;
	InitList(h);
	menu();
	int num,i=1,m;
	while(true)
	{
	
	cout<<"选择你需要进行的操作序号:"<<endl;
	cin>>num;
	switch(num)
	{
	case 1 :
		InitList(h);
		cout<<"请输入新链表元素个数："<<endl;
		cin>>m;
		cout<<"请输入元素：";
		while(i<=m)
		{
			cin>>e;
			ListInsert(h,i,e);
			i++;
		}
		cout<<endl;break;
	case 2 :
		cout<<"输入需要查询的元素：";
		cin>>e;
		cout<<"该元素位置为："<<LocateElem(h,e)<<endl;
		cout<<endl;
		break;
	case 3:
		cout<<"请问你想查询第几号元素：";
		cin>>m;
		GetElem(h,m,e);
		cout<<e<<endl;
		cout<<endl;break;
	case 4:
		cout<<"请选择插入元素的位置：";
		cin>>m;
		cout<<"请输入插入的元素：";
		cin>>e;
		ListInsert(h,m,e);
		DispList(h);
		break;
	case 5:
		cout<<"请选择删除的元素序号：";
		cin>>m;
		ListDelete(h,m,e);
		DispList(h);
		break;
	case 6:
		DispList(h);break;
	case 7:
		DestroyList(h);break;
	case 8:
		if(ListEmpty(h))cout<<"该链表为空。"<<endl;
		else cout<<"链表非空。";break;
	case 9:
		cout<<"链表长度为:"<<ListLength(h)<<endl;break;
	case 0: return 0;
	}
	}
	return 0;
}







// 队列.cpp : 定义控制台应用程序的入口点。
//

#include "stdafx.h"
#include<stdio.h>
#include<malloc.h>
#define MaxSize 5
typedef char ElemType;
typedef struct
{
	ElemType elem[MaxSize];
	int front,rear;             //队首和队尾指针  
}SqQueue;
void InitQueue(SqQueue *&q)     //初始化队列 
{
	q=(SqQueue *)malloc(sizeof(SqQueue));
	q->front=q->rear=0;
}
void ClearQueue(SqQueue *&q)    //释放队列
{
	free(q);
}
int QueueEmpty(SqQueue *&q)    //判断队是否为空
{
	return(q->front==q->rear);
}
int QueueLength(SqQueue *q) //求队列的长度
{
	return(q->rear-q->front+MaxSize)%MaxSize;
}
int enQueue(SqQueue *&q,ElemType e)     //元素进队
{
	if((q->rear+1)%MaxSize==q->front)   //判断队是否已满
		return 0;
	else
	{
		q->rear=(q->rear+1)%MaxSize;
		q->elem[q->rear]=e;
		return 1;
	}

}
int deQueue(SqQueue *&q,ElemType &e)    //元素出队
{
	if(q->rear==q->front)              //判断队是否为空
		return 0;
	else
	{
		q->front=(q->front+1)%MaxSize;
	    e=q->elem[q->front];
	    return 1;
	}
	
}


int _tmain(int argc, _TCHAR* argv[])
{
	ElemType e;
	SqQueue *q;
	printf("初始化队列q\n");
	InitQueue(q);
	printf("元素1 2 3 4 5 6 依次进队\n");
	if(enQueue(q,'1')==0)printf("队满，1不能进队\n");
	if(enQueue(q,'2')==0)printf("队满，2不能进队\n");
	if(enQueue(q,'3')==0)printf("队满，3不能进队\n");
	if(enQueue(q,'4')==0)printf("队满，4不能进队\n");
	if(enQueue(q,'5')==0)printf("队满，5不能进队\n");
	if(enQueue(q,'6')==0)printf("队满，6不能进队\n");
	printf("队列的元素个数：%d\n",QueueLength(q));
	printf("队列为%s\n",(QueueEmpty(q)?"空":"非空"));
	if(deQueue(q,e)==0)
		printf("队为空，不可出队\n");
	else
		printf("元素%c出队\n",e);
	printf("队列的元素个数：%d\n",QueueLength(q));
	printf("元素7进队\n");
	if(enQueue(q,'7')==0)printf("队满，不能进队\n");
	printf("队列的元素个数：%d\n",QueueLength(q));
	printf("出队列序列：");
	while(!QueueEmpty(q))
	{
		deQueue(q,e);
		printf("%c",e);
	}
	printf("\n");
	printf("释放队列\n");
	ClearQueue(q);
	printf("队列为%s\n",(QueueEmpty(q)?"空":"非空"));
	return 0;
}


